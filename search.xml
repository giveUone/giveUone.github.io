<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyBatisPlus</title>
    <url>/2020/07/17/MP%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="一、自动填充封装"><a href="#一、自动填充封装" class="headerlink" title="一、自动填充封装"></a>一、自动填充封装</h2><p>创建自动填充类 MyMetaObjectHandler</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtCreate"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、分页"><a href="#二、分页" class="headerlink" title="二、分页"></a>二、分页</h2><p>MyBatisPlusConfig中配置分页插件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Bean</span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <categories>
        <category>MyBatisPlus</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatisPlus</title>
    <url>/2020/07/17/MyBatisPlus/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>&emsp;&emsp;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<a id="more"></a>

<p>&nbsp;</p>
<h2 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h2><p>&emsp;&emsp;<strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。<br>&emsp;&emsp;<strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作。<br>&emsp;&emsp;<strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求。<br>&emsp;&emsp;<strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错。<br>&emsp;&emsp;<strong>支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库。<br>&emsp;&emsp;<strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题。<br>&emsp;&emsp;<strong>支持 XML 热加载</strong>：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动。<br>&emsp;&emsp;<strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作。<br>&emsp;&emsp;<strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）。<br>&emsp;&emsp;<strong>支持关键词自动转义</strong>：支持数据库关键词（order、key……）自动转义，还可自定义关键词。<br>&emsp;&emsp;<strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用。<br>&emsp;&emsp;<strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询。<br>&emsp;&emsp;<strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询。<br>&emsp;&emsp;<strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作。<br>&emsp;&emsp;<strong>内置 Sql 注入剥离器</strong>：支持 Sql 注入剥离，有效预防 Sql 注入攻击。</p>
<p>&nbsp;</p>
<h2 id="三、配置日志s"><a href="#三、配置日志s" class="headerlink" title="三、配置日志s"></a>三、配置日志s</h2><p>查看sql输出日志</p>
<pre><code>#mybatis日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><p>&nbsp;</p>
<h2 id="三、主键策略"><a href="#三、主键策略" class="headerlink" title="三、主键策略"></a>三、主键策略</h2><h3 id="1-ID-WORKER"><a href="#1-ID-WORKER" class="headerlink" title="(1)ID_WORKER"></a>(1)ID_WORKER</h3><p>MyBatis-Plus默认的主键策略是：ID_WORKER  全局唯一ID<br>参考资料：分布式系统唯一ID生成方案汇总：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html" target="_blank" rel="noopener">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p>
<h3 id="2-自增策略"><a href="#2-自增策略" class="headerlink" title="(2)自增策略"></a>(2)自增策略</h3><p>要想主键自增需要配置如下主键策略<br>&emsp;&emsp;<em>需要在创建数据表的时候设置主键自增</em><br>&emsp;&emsp;<em>实体字段中配置 @TableId(type = IdType.AUTO)</em><br>&nbsp;<br>要想影响所有实体的配置，可以设置全局主键配置</p>
<pre><code>#全局设置主键生成策略
mybatis-plus.global-config.db-config.id-type=auto</code></pre><p>&nbsp;</p>
]]></content>
      <categories>
        <category>MyBatisPlus</category>
      </categories>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2020/07/17/ES6/</url>
    <content><![CDATA[<h2 id="一、ECMAScript-6-简介"><a href="#一、ECMAScript-6-简介" class="headerlink" title="一、ECMAScript 6 简介"></a>一、ECMAScript 6 简介</h2><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<a id="more"></a>
<h3 id="1、ECMAScript-和-JavaScript-的关系"><a href="#1、ECMAScript-和-JavaScript-的关系" class="headerlink" title="1、ECMAScript 和 JavaScript 的关系"></a>1、ECMAScript 和 JavaScript 的关系</h3><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p>
<p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p>
<p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）</p>
<h3 id="2、ES6-与-ECMAScript-2015-的关系"><a href="#2、ES6-与-ECMAScript-2015-的关系" class="headerlink" title="2、ES6 与 ECMAScript 2015 的关系"></a>2、ES6 与 ECMAScript 2015 的关系</h3><p>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？</p>
<p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p>
<p>ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。</p>
<p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p>
<p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p>
<h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。</p>
<h3 id="1、let声明变量"><a href="#1、let声明变量" class="headerlink" title="1、let声明变量"></a>1、let声明变量</h3><p>创建 let.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量没有局部作用域</span></span><br><span class="line"><span class="comment">// let 声明的变量  有局部作用域</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 可以声明多次</span></span><br><span class="line"><span class="comment">// let 只能声明一次</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(m)  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(n)  <span class="comment">// Identifier 'n' has already been declared</span></span><br></pre></td></tr></table></figure>

<h3 id="2、const声明常量（只读变量）"><a href="#2、const声明常量（只读变量）" class="headerlink" title="2、const声明常量（只读变量）"></a>2、const声明常量（只读变量）</h3><p>创建 const.html</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、声明之后不允许改变    </span></span><br><span class="line"><span class="keyword">const</span> <span class="literal">PI</span> = <span class="string">"3.1415926"</span></span><br><span class="line"><span class="literal">PI</span> = <span class="number">3</span>  <span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、一但声明必须初始化，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> MY_AGE  <span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h3 id="3、解构赋值"><a href="#3、解构赋值" class="headerlink" title="3、解构赋值"></a>3、解构赋值</h3><p>创建 解构赋值.html<br>解构赋值是对赋值运算符的扩展。</p>
<p>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p>
<p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、数组解构</span></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line">let a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br><span class="line">console.log(a, b, c)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">let [x, y, z] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">console.log(x, y, z)</span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//<span class="number">2</span>、对象解构</span><br><span class="line">let <span class="keyword">user</span> = &#123;<span class="type">name</span>: <span class="string">'Helen'</span>, age: <span class="number">18</span>&#125;</span><br><span class="line">// 传统</span><br><span class="line">let name1 = <span class="keyword">user</span>.name</span><br><span class="line">let age1 = <span class="keyword">user</span>.age</span><br><span class="line">console.log(name1, age1)</span><br><span class="line">// ES6</span><br><span class="line">let &#123; <span class="type">name</span>, age &#125; =  <span class="keyword">user</span>//注意：结构的变量必须是<span class="keyword">user</span>中的属性</span><br><span class="line">console.log(<span class="type">name</span>, age)</span><br></pre></td></tr></table></figure>

<h3 id="4、模板字符串"><a href="#4、模板字符串" class="headerlink" title="4、模板字符串"></a>4、模板字符串</h3><p>创建 模板字符串.html<br>模板字符串相当于加强版的字符串，用反引号 `,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、多行字符串</span></span><br><span class="line"><span class="keyword">let</span> string1 =  <span class="string">`Hey,</span></span><br><span class="line"><span class="string">can you stop angry now?`</span></span><br><span class="line"><span class="built_in">console</span>.log(string1)</span><br><span class="line"><span class="comment">// Hey,</span></span><br><span class="line"><span class="comment">// can you stop angry now?</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// <span class="number">2</span>、字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放入 JavaScript 表达式。</span><br><span class="line">let <span class="type">name</span> = "Mike"</span><br><span class="line">let age = <span class="number">27</span></span><br><span class="line">let <span class="keyword">info</span> = `My <span class="type">Name</span> <span class="keyword">is</span> $&#123;<span class="type">name</span>&#125;,I am $&#123;age+<span class="number">1</span>&#125; years <span class="built_in">old</span> next year.`</span><br><span class="line">console.log(<span class="keyword">info</span>)</span><br><span class="line">// My <span class="type">Name</span> <span class="keyword">is</span> Mike,I am <span class="number">28</span> years <span class="built_in">old</span> next year.</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3、字符串中调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"have fun!"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> string2 = <span class="string">`Game start,<span class="subst">$&#123;f()&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(string2);  <span class="comment">// Game start,have fun!</span></span><br></pre></td></tr></table></figure>

<h3 id="5、声明对象简写"><a href="#5、声明对象简写" class="headerlink" title="5、声明对象简写"></a>5、声明对象简写</h3><p>创建 声明对象简写.html</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">12</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Amy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;age: age, name: name&#125;</span><br><span class="line">console.<span class="built_in">log</span>(person1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;age, name&#125;</span><br><span class="line">console.<span class="built_in">log</span>(person2) <span class="comment">//&#123;age: 12, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、定义方法简写"><a href="#6、定义方法简写" class="headerlink" title="6、定义方法简写"></a>6、定义方法简写</h3><p>创建 定义方法简写.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">    sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hi"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person1.sayHi();<span class="comment">//"Hi"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;</span><br><span class="line">    sayHi()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hi"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person2.sayHi()  <span class="comment">//"Hi"</span></span><br></pre></td></tr></table></figure>

<h3 id="7、对象拓展运算符"><a href="#7、对象拓展运算符" class="headerlink" title="7、对象拓展运算符"></a>7、对象拓展运算符</h3><p>创建 对象拓展运算符.html<br>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、拷贝对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;name: <span class="string">"Amy"</span>, age: <span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; <span class="params">...</span>person1 &#125;</span><br><span class="line">console.<span class="keyword">log</span>(someone)  <span class="comment">//&#123;name: "Amy", age: 15&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、合并对象</span></span><br><span class="line"><span class="keyword">let</span> age = &#123;age: <span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> name = &#123;name: <span class="string">"Amy"</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;<span class="params">...</span>age, <span class="params">...</span>name&#125;</span><br><span class="line">console.<span class="keyword">log</span>(person2)  <span class="comment">//&#123;age: 15, name: "Amy"&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="8、箭头函数"><a href="#8、箭头函数" class="headerlink" title="8、箭头函数"></a>8、箭头函数</h3><p>创建 箭头函数.html<br>箭头函数提供了一种更加简洁的函数书写方式。基本语法是：<br>参数 =&gt; 函数体</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="params">a</span> =&gt;</span> a</span><br><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当箭头函数没有参数或者有多个参数，要用 () 括起来。</span></span><br><span class="line"><span class="comment">// 当箭头函数函数体有多行语句，用 &#123;&#125; 包裹起来，表示代码块，</span></span><br><span class="line"><span class="comment">// 当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span></span><br><span class="line"><span class="keyword">var</span> f3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = a+b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f3(<span class="number">6</span>,<span class="number">2</span>))  <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面代码相当于：</span></span><br><span class="line"><span class="keyword">var</span> f4 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b</span><br></pre></td></tr></table></figure>
<p>箭头函数多用于匿名函数的定义</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>MP代码生成器</title>
    <url>/2020/07/17/MP%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<p>CodeGenerator.java</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        System.out.println(projectPath);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"atguigu"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * mp生成service层代码，默认接口名称第一个字母有 I</span></span><br><span class="line"><span class="comment">         * UcenterService</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);	<span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(<span class="string">"serviceedu"</span>); <span class="comment">//模块名</span></span><br><span class="line">        pc.setParent(<span class="string">"com.atguigu"</span>);</span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">"edu_teacher"</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <categories>
        <category>MyBatisPlus</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/2020/07/17/Node-js/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1、什么是Node-js"><a href="#1、什么是Node-js" class="headerlink" title="1、什么是Node.js"></a>1、什么是Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<a id="more"></a>

<h3 id="2、Node-js有什么用"><a href="#2、Node-js有什么用" class="headerlink" title="2、Node.js有什么用"></a>2、Node.js有什么用</h3><p>如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。<br>Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。<br>当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p>
<h3 id="3、服务器端应用开发"><a href="#3、服务器端应用开发" class="headerlink" title="3、服务器端应用开发"></a>3、服务器端应用开发</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello Server'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure>
<p>运行服务器程序 node xxx.js</p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Swagger2</title>
    <url>/2020/07/17/Swagger2/</url>
    <content><![CDATA[<h2 id="一、Swagger简介"><a href="#一、Swagger简介" class="headerlink" title="一、Swagger简介"></a>一、Swagger简介</h2><p>前后端分离开发模式中，api文档是最好的沟通方式。<br>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<a id="more"></a>
<p>&emsp;&emsp;<strong><em>1、及时性</em></strong> (接口变更后，能够及时准确地通知相关前后端开发人员)<br>&emsp;&emsp;<strong><em>2、规范性</em></strong> (并且保证接口的规范性，如接口的地址，请求方式，参数及响应格式和错误信息)<br>&emsp;&emsp;<strong><em>3、一致性</em></strong> (接口信息一致，不会出现因开发人员拿到的文档版本不一致，而出现分歧)<br>&emsp;&emsp;<strong><em>4、可测性</em></strong> (直接在接口文档上进行测试，以方便理解业务)</p>
<h2 id="二、创建swagger的配置类"><a href="#二、创建swagger的配置类" class="headerlink" title="二、创建swagger的配置类"></a>二、创建swagger的配置类</h2><p>创建类SwaggerConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"webApi"</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">"/admin/.*"</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">"/error.*"</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"网站-课程中心API文档"</span>)</span><br><span class="line">                .description(<span class="string">"本文档描述了课程中心微服务接口定义"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"Helen"</span>, <span class="string">"http://atguigu.com"</span>, <span class="string">"55317332@qq.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义接口说明和参数说明:<br>&emsp;&emsp;定义在类上：@Api<br>&emsp;&emsp;定义在方法上：@ApiOperation<br>&emsp;&emsp;定义在参数上：@ApiParam</p>
<p>&nbsp;</p>
]]></content>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2020/07/17/Vue/</url>
    <content><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1、Vue-js-是什么"><a href="#1、Vue-js-是什么" class="headerlink" title="1、Vue.js 是什么"></a>1、Vue.js 是什么</h3><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。<br>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。<br>官方网站：<a href="https://cn.vuejs.org" target="_blank" rel="noopener">https://cn.vuejs.org</a></p>
<a id="more"></a>

<h3 id="2、初始Vue-js"><a href="#2、初始Vue-js" class="headerlink" title="2、初始Vue.js"></a>2、初始Vue.js</h3><p>创建 demo.html</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- id标识vue作用的范围 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"><span class="comment"> 插值表达式，绑定vue中的data数据 --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    // 创建一个vue对象</span></span><br><span class="line"><span class="xml">    new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: '#app',//绑定vue作用的范围</span></span><br><span class="line"><span class="xml">        data: &#123;//定义页面中显示的模型数据</span></span><br><span class="line"><span class="xml">            message: 'Hello Vue!'</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这就是声明式渲染：Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。<br>这里的核心思想就是没有繁琐的DOM操作，例如jQuery中，我们需要先找到div节点，获取到DOM对象，然后进行一系列的节点操作。</p>
<p>&nbsp;</p>
<p>在vs code中创建代码片段：<br>文件 =&gt;  首选项 =&gt; 用户代码片段 =&gt; 新建全局代码片段/或文件夹代码片段：vue-html.code-snippets<br>注意：制作代码片段的时候，字符串中如果包含文件中复制过来的“Tab”键的空格，要换成“空格键”的空格。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"vue htm"</span>: &#123;</span><br><span class="line">		<span class="attr">"scope"</span>: <span class="string">"html"</span>,</span><br><span class="line">		<span class="attr">"prefix"</span>: <span class="string">"vuehtml"</span>,</span><br><span class="line">		<span class="attr">"body"</span>: [</span><br><span class="line">			<span class="string">"&lt;!DOCTYPE html&gt;"</span>,</span><br><span class="line">			<span class="string">"&lt;html lang=\"en\"&gt;"</span>,</span><br><span class="line">			<span class="string">""</span>,</span><br><span class="line">			<span class="string">"&lt;head&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;meta charset=\"UTF-8\"&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;title&gt;Document&lt;/title&gt;"</span>,</span><br><span class="line">			<span class="string">"&lt;/head&gt;"</span>,</span><br><span class="line">			<span class="string">""</span>,</span><br><span class="line">			<span class="string">"&lt;body&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;div id=\"app\"&gt;"</span>,</span><br><span class="line">			<span class="string">""</span>,</span><br><span class="line">			<span class="string">"    &lt;/div&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;script src=\"vue.min.js\"&gt;&lt;/script&gt;"</span>,</span><br><span class="line">			<span class="string">"    &lt;script&gt;"</span>,</span><br><span class="line">			<span class="string">"        new Vue(&#123;"</span>,</span><br><span class="line">			<span class="string">"            el: '#app',"</span>,</span><br><span class="line">			<span class="string">"            data: &#123;"</span>,</span><br><span class="line">			<span class="string">"                $1"</span>,</span><br><span class="line">			<span class="string">"            &#125;"</span>,</span><br><span class="line">			<span class="string">"        &#125;)"</span>,</span><br><span class="line">			<span class="string">"    &lt;/script&gt;"</span>,</span><br><span class="line">			<span class="string">"&lt;/body&gt;"</span>,</span><br><span class="line">			<span class="string">""</span>,</span><br><span class="line">			<span class="string">"&lt;/html&gt;"</span>,</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"description"</span>: <span class="string">"my vue template in html"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><h3 id="1、基本数据渲染和指令"><a href="#1、基本数据渲染和指令" class="headerlink" title="1、基本数据渲染和指令"></a>1、基本数据渲染和指令</h3><p>创建 01-基本数据渲染和指令.html<br>v-bind 特性被称为指令。指令带有前缀 v- ,除了使用插值表达式进行数据渲染，也可以使用 v-bind指令，它的简写的形式就是一个冒号。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">data: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    content: '我是标题',</span></span><br><span class="line"><span class="template-variable">    message: '页面加载于 ' + new Date().toLocaleString()</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 如果要将模型数据绑定在html属性中，则使用 v-bind 指令</span></span></span><br><span class="line"><span class="xml">     此时title中显示的是模型数据</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;content&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- v-bind 指令的简写形式： 冒号（:） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:title</span>=<span class="string">"message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;content&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2、双向数据绑定"><a href="#2、双向数据绑定" class="headerlink" title="2、双向数据绑定"></a>2、双向数据绑定</h3><p>创建 02-双向数据绑定.html<br>双向数据绑定和单向数据绑定：使用 v-model 进行双向数据绑定</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">data: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    searchMap:&#123;</span></span><br><span class="line"><span class="template-variable">        keyWord: 'hello'</span></span><br><span class="line"><span class="template-variable">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- v-bind:value只能进行单向的数据渲染 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"searchMap.keyWord"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- v-model 可以进行双向的数据绑定  --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchMap.keyWord"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您要查询的是：</span><span class="template-variable">&#123;&#123;searchMap.keyWord&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="3、事件"><a href="#3、事件" class="headerlink" title="3、事件"></a>3、事件</h3><p>创建 03-事件.html<br>需求：点击查询按钮，按照输入框中输入的内容查找公司相关信息<br>在前面的例子基础上，data节点中增加 result，增加 methods节点 并定义 search方法</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">data</span>: &#123;</span><br><span class="line">     <span class="attribute">searchMap</span>:&#123;</span><br><span class="line">         <span class="attribute">keyWord</span>: <span class="string">'hello'</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//查询结果</span></span><br><span class="line">     <span class="attribute">result</span>: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attribute">methods</span>:&#123;</span><br><span class="line">    search()&#123;</span><br><span class="line">        console.log(<span class="string">'search'</span>)</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html中增加 button 和 p<br>使用 v-on 进行数件处理，v-on:click 表示处理鼠标点击事件，事件调用的方法定义在 vue 对象声明的 methods 节点中</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- v-on 指令绑定事件，click指定绑定的事件类型，事件发生时调用vue中methods节点中定义的方法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"search()"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您要查询的是：</span><span class="template-variable">&#123;&#123;searchMap.keyWord&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"result.site"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><span class="template-variable">&#123;&#123;result.title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>完善search方法</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">search()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'search'</span>);</span><br><span class="line">    <span class="keyword">this</span>.result = &#123;</span><br><span class="line">        <span class="string">"title"</span>:<span class="string">"尚硅谷"</span>,</span><br><span class="line">        <span class="string">"site"</span>:<span class="string">"http://www.atguigu.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-on 指令的简写形式 @ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"search()"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、修饰符"><a href="#4、修饰符" class="headerlink" title="4、修饰符"></a>4、修饰符</h3><p>创建 04-修饰符.html<br>修饰符 (Modifiers) 是以半角句号（.）指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。<br>例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br>即阻止事件原本的默认行为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">data</span>: &#123;</span><br><span class="line">    <span class="attribute">user</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修饰符用于指出一个指令应该以特殊方式绑定。</span></span><br><span class="line"><span class="comment">     这里的 .prevent 修饰符告诉 v-on 指令对于触发的事件调用js的 event.preventDefault()：</span></span><br><span class="line"><span class="comment">     即阻止表单提交的默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"save"</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">v-model</span>=<span class="string">"user.username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">onSubmit</span>() &#123;</span></span><br><span class="line"><span class="function">        <span class="variable"><span class="keyword">if</span></span> (<span class="variable">this.user.username</span>) &#123;</span></span><br><span class="line"><span class="function">            <span class="variable">console.log</span>(<span class="string">'提交表单'</span>)</span></span><br><span class="line">        &#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">            <span class="function"><span class="title">alert</span>(<span class="string">'请输入用户名'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、条件渲染"><a href="#5、条件渲染" class="headerlink" title="5、条件渲染"></a>5、条件渲染</h3><p>创建 05-条件渲染.html<br>v-if：条件指令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">data</span>: &#123;</span><br><span class="line">    <span class="attribute">ok</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：单个复选框绑定到布尔值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"ok"</span>&gt;</span>同意许可协议</span><br><span class="line"><span class="comment">&lt;!-- v:if条件指令：还有v-else、v-else-if 切换开销大 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>if：Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>v-show：条件指令<br>使用v-show完成和上面相同的功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v:show 条件指令 初始渲染开销大 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>show：Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"!ok"</span>&gt;</span>no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1、v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>2、v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>3、相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。<br>4、一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p>
<h3 id="6、列表渲染"><a href="#6、列表渲染" class="headerlink" title="6、列表渲染"></a>6、列表渲染</h3><p>创建 06-列表渲染.html<br>v-for：列表循环指令<br>例1：简单的列表渲染</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 1、简单的列表渲染 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span></span><span class="template-variable">&#123;&#123; n &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 如果想获取索引，则使用index关键字，注意，圆括号中的index必须放在后面 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(n, index) in 5"</span>&gt;</span></span><span class="template-variable">&#123;&#123; n &#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123; index &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>例2：遍历数据列表</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">data:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">userList:</span> <span class="string">[</span></span><br><span class="line">        <span class="string">&#123;</span> <span class="attr">id:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">username:</span> <span class="string">'helen'</span><span class="string">,</span> <span class="attr">age:</span> <span class="number">18</span> <span class="string">&#125;,</span></span><br><span class="line">        <span class="string">&#123;</span> <span class="attr">id:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">username:</span> <span class="string">'peter'</span><span class="string">,</span> <span class="attr">age:</span> <span class="number">28</span> <span class="string">&#125;,</span></span><br><span class="line">        <span class="string">&#123;</span> <span class="attr">id:</span> <span class="number">3</span><span class="string">,</span> <span class="attr">username:</span> <span class="string">'andy'</span><span class="string">,</span> <span class="attr">age:</span> <span class="number">38</span> <span class="string">&#125;</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 2、遍历数据列表 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- &lt;tr v-for="item in userList"&gt;&lt;/tr&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in userList"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;index&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.username&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.age&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue组件</title>
    <url>/2020/07/17/Vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="一、组件（重点）"><a href="#一、组件（重点）" class="headerlink" title="一、组件（重点）"></a>一、组件（重点）</h2><p>组件（Component）是 Vue.js 最强大的功能之一。<br>组件可以扩展 HTML 元素，封装可重用的代码。<br>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树。</p>
<a id="more"></a>

<h3 id="1、局部组件"><a href="#1、局部组件" class="headerlink" title="1、局部组件"></a>1、局部组件</h3><p>创建 01-1-局部组件.html<br>定义组件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">app</span> = new Vue(&#123;</span><br><span class="line">    el: '#<span class="keyword">app</span>',</span><br><span class="line">    <span class="comment">// 定义局部组件，这里可以定义多个局部组件</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="comment">//组件的名字</span></span><br><span class="line">        'Navbar': &#123;</span><br><span class="line">            <span class="comment">//组件的内容</span></span><br><span class="line">            template: '&lt;ul&gt;&lt;<span class="keyword">li</span>&gt;首页&lt;/<span class="keyword">li</span>&gt;&lt;<span class="keyword">li</span>&gt;学员管理&lt;/<span class="keyword">li</span>&gt;&lt;/ul&gt;'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、全局组件"><a href="#2、全局组件" class="headerlink" title="2、全局组件"></a>2、全局组件</h3><p>创建 01-2-全局组件.html<br>定义全局组件：components/Navbar.js</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 定义全局组件</span><br><span class="line">Vue.component('Navbar', &#123;</span><br><span class="line">    template: '<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>'</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/Navbar.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、实例生命周期"><a href="#二、实例生命周期" class="headerlink" title="二、实例生命周期"></a>二、实例生命周期</h2><p><a href="https://www.jianshu.com/p/7819808b1bd6" target="_blank" rel="noopener">https://www.jianshu.com/p/7819808b1bd6</a><br>创建 03-vue实例的生命周期.html</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    <span class="meta">message</span>: <span class="string">'床前明月光'</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">        console<span class="meta">.log(</span><span class="string">'执行show方法'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    u<span class="meta">pdate(</span>) &#123;</span><br><span class="line">        this.<span class="meta">message</span> = <span class="string">'玻璃好上霜'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"update"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"h3"</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>分析生命周期相关方法的执行时机</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//===创建时的四个事件</span></span><br><span class="line">beforeCreate() &#123; <span class="comment">// 第一个被执行的钩子方法：实例被创建出来之前执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message) <span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">this</span>.show() <span class="comment">//TypeError: this.show is not a function</span></span><br><span class="line">    <span class="comment">// beforeCreate执行时，data 和 methods 中的 数据都还没有没初始化</span></span><br><span class="line">&#125;,</span><br><span class="line">created() &#123; <span class="comment">// 第二个被执行的钩子方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message) <span class="comment">//床前明月光</span></span><br><span class="line">    <span class="keyword">this</span>.show() <span class="comment">//执行show方法</span></span><br><span class="line">    <span class="comment">// created执行时，data 和 methods 都已经被初始化好了！</span></span><br><span class="line">    <span class="comment">// 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeMount() &#123; <span class="comment">// 第三个被执行的钩子方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText) <span class="comment">//&#123;&#123; message &#125;&#125;</span></span><br><span class="line">    <span class="comment">// beforeMount执行时，模板已经在内存中编辑完成了，尚未被渲染到页面中</span></span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123; <span class="comment">// 第四个被执行的钩子方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText) <span class="comment">//床前明月光</span></span><br><span class="line">    <span class="comment">// 内存中的模板已经渲染到页面，用户已经可以看见内容</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===运行中的两个事件</span></span><br><span class="line">beforeUpdate() &#123; <span class="comment">// 数据更新的前一刻</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'界面显示的内容：'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data 中的 message 数据是：'</span> + <span class="keyword">this</span>.message)</span><br><span class="line">    <span class="comment">// beforeUpdate执行时，内存中的数据已更新，但是页面尚未被渲染</span></span><br><span class="line">&#125;,</span><br><span class="line">updated() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'界面显示的内容：'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'h3'</span>).innerText)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data 中的 message 数据是：'</span> + <span class="keyword">this</span>.message)</span><br><span class="line">    <span class="comment">// updated执行时，内存中的数据已更新，并且页面已经被渲染</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、路由"><a href="#三、路由" class="headerlink" title="三、路由"></a>三、路由</h2><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。<br>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。<br>Vue.js 路由需要载入 vue-router 库<br>创建 04-路由.html</p>
<h3 id="1、引入js"><a href="#1、引入js" class="headerlink" title="1、引入js"></a>1、引入js</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、编写html"><a href="#2、编写html" class="headerlink" title="2、编写html"></a>2、编写html</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/student"</span>&gt;</span>会员管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/teacher"</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3、编写js"><a href="#3、编写js" class="headerlink" title="3、编写js"></a>3、编写js</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 1. 定义（路由）组件。</span></span><br><span class="line"><span class="xml">    // 可以从其他文件 import 进来</span></span><br><span class="line"><span class="xml">    const Welcome = </span><span class="xquery">&#123; template: <span class="string">'&lt;div&gt;欢迎&lt;/div&gt;'</span> &#125;</span></span><br><span class="line"><span class="xml">    const Student = </span><span class="xquery">&#123; template: <span class="string">'&lt;div&gt;student list&lt;/div&gt;'</span> &#125;</span></span><br><span class="line"><span class="xml">    const Teacher = </span><span class="xquery">&#123; template: <span class="string">'&lt;div&gt;teacher list&lt;/div&gt;'</span> &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    // 2. 定义路由</span></span><br><span class="line"><span class="xml">    // 每个路由应该映射一个组件。</span></span><br><span class="line"><span class="xml">    const routes = [</span></span><br><span class="line"><span class="xml">        </span><span class="xquery">&#123;<span class="built_in"> path</span>: <span class="string">'/'</span>, redirect: <span class="string">'/welcome'</span> &#125;</span><span class="xml">, //设置默认指向的路径</span></span><br><span class="line"><span class="xml">        </span><span class="xquery">&#123;<span class="built_in"> path</span>: <span class="string">'/welcome'</span>, component: Welcome &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        </span><span class="xquery">&#123;<span class="built_in"> path</span>: <span class="string">'/student'</span>, component: Student &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        </span><span class="xquery">&#123;<span class="built_in"> path</span>: <span class="string">'/teacher'</span>, component: Teacher &#125;</span></span><br><span class="line"><span class="xml">    ]</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    // 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="xml">    const router = new VueRouter(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        routes // （缩写）相当于 routes: routes</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    // 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="xml">    // 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="xml">    const app = new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="xquery">        router</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    // 现在，应用已经启动了！</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="四、axios"><a href="#四、axios" class="headerlink" title="四、axios"></a>四、axios</h2><p>axios是独立于vue的一个项目，基于promise用于浏览器和node.js的http客户端<br>&emsp;&emsp;在浏览器中可以帮助我们完成 ajax请求的发送<br>&emsp;&emsp;在node.js中可以向远程接口发送请求</p>
<h3 id="1、获取数据"><a href="#1、获取数据" class="headerlink" title="1、获取数据"></a>1、获取数据</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：测试时需要开启后端服务器，并且后端开启跨域访问权限</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el: '#app',</span><br><span class="line">    data: &#123;</span><br><span class="line">        memberList: []//数组</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        this.getList()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">        getList(<span class="name">id</span>) &#123;</span><br><span class="line">            //vm = this</span><br><span class="line">            axios.get('http<span class="symbol">://localhost</span>:<span class="number">8081</span>/admin/ucenter/member')</span><br><span class="line">            .then(<span class="name">response</span> =&gt; &#123;</span><br><span class="line">                console.log(<span class="name">response</span>)</span><br><span class="line">                this.memberList = response.data.data.items</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="name">error</span> =&gt; &#123;</span><br><span class="line">                console.log(<span class="name">error</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、显示数据"><a href="#2、显示数据" class="headerlink" title="2、显示数据"></a>2、显示数据</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in memberList"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.memberId&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.nickname&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>八种商业模式</title>
    <url>/2020/07/15/%E5%85%AB%E5%A4%A7%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1、C2C模式（Consumer-To-Consumer-平台模式-）"><a href="#1、C2C模式（Consumer-To-Consumer-平台模式-）" class="headerlink" title="1、C2C模式（Consumer To Consumer 平台模式 ）"></a>1、C2C模式（Consumer To Consumer 平台模式 ）</h2><p>&emsp;&emsp;用户到用户，这种模式本质是将自己的流量或者用户转卖给视频或者直播的内容提供者，通过出售内容分成获利。平台模式避开了非常沉重的内容和服务，扩张迅速，但实际这种模式也有缺陷，在线教育这两年的发展使内容迅速贬值，比较难带来更免费用户和流量。</p>
<a id="more"></a>
<p>代表网站：<br>&emsp;&emsp;腾讯课堂 <a href="https://ke.qq.com/" target="_blank" rel="noopener">https://ke.qq.com/</a></p>
<p>&nbsp;</p>
<h2 id="2、B2C模式（Business-To-Customer-会员模式）"><a href="#2、B2C模式（Business-To-Customer-会员模式）" class="headerlink" title="2、B2C模式（Business To Customer 会员模式）"></a>2、B2C模式（Business To Customer 会员模式）</h2><p>&emsp;&emsp;商家到用户，这种模式是自己制作大量自有版权的视频，放在自有平台上，让用户按月付费或者按年付费。 这种模式简单，快速，只要专心录制大量视频即可快速发展，其曾因为 lynda 的天价融资而 大热。但在中国由于版权保护意识不强，教育内容易于复制，有海量的免费资源的竞争对手众多等原因，难以取得像样的现金流。<br>代表网站：<br>&emsp;&emsp;慕课网 <a href="https://www.imooc.com/" target="_blank" rel="noopener">https://www.imooc.com/</a></p>
<p>&nbsp;</p>
<h2 id="3、B2B2C（商家到商家到用户）"><a href="#3、B2B2C（商家到商家到用户）" class="headerlink" title="3、B2B2C（商家到商家到用户）"></a>3、B2B2C（商家到商家到用户）</h2><p>&emsp;&emsp;平台链接第三方教育机构和用户，平台一般不直接提供课程内容，而是更多承担教育的互联网载体角色，为教学过程各个环节提供全方位支持和服务。<br>代表网站：<br>&emsp;&emsp;腾讯课堂 <a href="https://ke.qq.com/" target="_blank" rel="noopener">https://ke.qq.com/</a></p>
<p>&nbsp;</p>
<h2 id="4、垂直领域"><a href="#4、垂直领域" class="headerlink" title="4、垂直领域"></a>4、垂直领域</h2><p>&emsp;&emsp;这种模式需要糅合录播，直播，帮助服务等多种手段，对学生学习某一项内容负责。这种模式收费高，有较强的壁垒。这种产品一旦形成口碑，会有稳定的用户群和收入，但产品非常复杂，难度大，门槛高，即使单独一个项目都会耗费大量的人力物力，因此发展速度较慢。<br>代表网站：<br>&emsp;&emsp;网易云课堂的微专业 <a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></p>
<p>&nbsp;</p>
<h2 id="5、直播、互动"><a href="#5、直播、互动" class="headerlink" title="5、直播、互动"></a>5、直播、互动</h2><p>&emsp;&emsp;这种模式将传统课堂上的反馈，交互，答疑搬到线上。让用户容易接受，只要服务贴心，用 户就愿意买单，因此有丰富现金流。但缺陷是只能通过平台吸引用户，造成了竞争门槛过低， 模式雷同，对手众多，收益的永远是拥有流量或者用户的大平台。<br>代表网站：<br>&emsp;&emsp;学而思 <a href="https://www.xueersi.com" target="_blank" rel="noopener">https://www.xueersi.com</a></p>
<p>&nbsp;</p>
<h2 id="6、1-对-1"><a href="#6、1-对-1" class="headerlink" title="6、1 对 1"></a>6、1 对 1</h2><p>&emsp;&emsp;让一个讲师在一定时间内对一个学员进行辅导，学生按照时间支付费用。这种模式收费容易， 现金流好，产品难度不大，市场空间大，但是人力资源的获取消耗却是巨大的，如果师资上控制不好，比如优秀的讲师留不住，或者整体成本太大，都会导致 1 对 1 模式难以发展。<br>代表网站：<br>&emsp;&emsp;学而思 <a href="https://www.xueersi.com" target="_blank" rel="noopener">https://www.xueersi.com</a></p>
<p>&nbsp;</p>
<h2 id="7、O2O-模式（Online-To-Offline-线上到线下）"><a href="#7、O2O-模式（Online-To-Offline-线上到线下）" class="headerlink" title="7、O2O 模式（Online To Offline 线上到线下）"></a>7、O2O 模式（Online To Offline 线上到线下）</h2><p>&emsp;&emsp;就是通过免费内容或者运营，让线上平台获取用户和流量，将用户吸引到线下开课，或 者让学员到加盟的线下机构上课。这种模式形式简单，收益高，只要把控用户需求，吸引到用户，收费不成问题，而且符合传统的消费习惯。<br>代表网站：<br>&emsp;&emsp;启德教育 <a href="https://www.eic.org.cn/" target="_blank" rel="noopener">https://www.eic.org.cn/</a></p>
<p>&nbsp;</p>
<h2 id="8、freemium（免费增值）"><a href="#8、freemium（免费增值）" class="headerlink" title="8、freemium（免费增值）"></a>8、freemium（免费增值）</h2><p>&emsp;&emsp;Freemium最早由AVC的Fred Wilson在2006年提出, 指的是用免费服务吸引用户，然后通过增值服务，将部分免费用户转化为收费用户，实现变现。Freemium模式中有“二八定律”的因素，即一小部分对价格不敏感的高端用户，愿意为一些额 外的功能付费，为服务提供者带来大部分收入。<br>代表网站：<br>&emsp;&emsp;中国大学慕课 <a href="http://www.icourse163.org" target="_blank" rel="noopener">http://www.icourse163.org</a> </p>
<p>&nbsp;</p>
]]></content>
  </entry>
  <entry>
    <title>数据库设计规约</title>
    <url>/2020/07/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E7%BA%A6/</url>
    <content><![CDATA[<p>1、库名与应用名称尽量一致</p>
<a id="more"></a>
<p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头，</p>
<p>3、表名不使用复数名词</p>
<p>4、表的命名最好是加上“业务名称_表的作用”。如，edu_teacher</p>
<p>5、表必备三字段：id, gmt_create, gmt_modified<br>&emsp;&emsp;说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。<br>（如果使用分库分表集群部署，则id类型为verchar，非自增，业务中使用分布式id生成器）<br>gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被 动更新。</p>
<p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 </p>
<p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。<br>&emsp;&emsp;说明：任何字段如果为非负数，必须是 unsigned。<br>&emsp;&emsp;注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。<br>&emsp;&emsp;正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。 </p>
<p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>
<p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 </p>
<p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。</p>
<p>11、唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br>&emsp;&emsp;说明：uk_ 即 unique key；idx_ 即 index 的简称</p>
<p>12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。 </p>
<p>&nbsp;</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>统一异常处理</title>
    <url>/2020/07/17/%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、什么是统一异常处理"><a href="#一、什么是统一异常处理" class="headerlink" title="一、什么是统一异常处理"></a>一、什么是统一异常处理</h2><p>我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要统一异常处理</p>
<a id="more"></a>

<h2 id="二、统一异常处理"><a href="#二、统一异常处理" class="headerlink" title="二、统一异常处理"></a>二、统一异常处理</h2><p>创建统一异常处理器</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@ControllerAdvice</span></span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line">    <span class="variable">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="variable">@ResponseBody</span></span><br><span class="line">    public R error(Exception e)&#123;</span><br><span class="line">        <span class="selector-tag">e</span><span class="selector-class">.printStackTrace</span>();</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">R</span><span class="selector-class">.error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、处理特定异常"><a href="#三、处理特定异常" class="headerlink" title="三、处理特定异常"></a>三、处理特定异常</h2><p>添加异常处理方法</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ExceptionHandler</span>(ArithmeticException.class)</span><br><span class="line"><span class="variable">@ResponseBody</span></span><br><span class="line">public R error(ArithmeticException e)&#123;</span><br><span class="line">    <span class="selector-tag">e</span><span class="selector-class">.printStackTrace</span>();</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">R</span><span class="selector-class">.error</span>()<span class="selector-class">.message</span>(<span class="string">"执行了自定义异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、自定义异常"><a href="#四、自定义异常" class="headerlink" title="四、自定义异常"></a>四、自定义异常</h2><h3 id="1、创建自定义异常类"><a href="#1、创建自定义异常类" class="headerlink" title="1、创建自定义异常类"></a>1、创建自定义异常类</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@AllArgsConstructor</span></span><br><span class="line"><span class="variable">@NoArgsConstructor</span></span><br><span class="line">public class GuliException extends RuntimeException &#123;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"状态码"</span>)</span><br><span class="line">    private Integer code;</span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">msg</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、业务中需要的位置抛出GuliException"><a href="#2、业务中需要的位置抛出GuliException" class="headerlink" title="2、业务中需要的位置抛出GuliException"></a>2、业务中需要的位置抛出GuliException</h3><figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(<span class="number">20001</span>,<span class="string">"出现自定义异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、添加异常处理方法"><a href="#3、添加异常处理方法" class="headerlink" title="3、添加异常处理方法"></a>3、添加异常处理方法</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ExceptionHandler</span>(GuliException.class)</span><br><span class="line"><span class="variable">@ResponseBody</span></span><br><span class="line">public R error(GuliException e)&#123;</span><br><span class="line">    <span class="selector-tag">e</span><span class="selector-class">.printStackTrace</span>();</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">R</span><span class="selector-class">.error</span>()<span class="selector-class">.message</span>(e.getMsg())<span class="selector-class">.code</span>(e.getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>统一处理</category>
      </categories>
  </entry>
  <entry>
    <title>统一日志处理</title>
    <url>/2020/07/17/%E7%BB%9F%E4%B8%80%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、日志"><a href="#一、日志" class="headerlink" title="一、日志"></a>一、日志</h2><h3 id="配置日志级别"><a href="#配置日志级别" class="headerlink" title="配置日志级别"></a>配置日志级别</h3><p>日志记录器（Logger）的行为是分等级的。如下表所示：<br>&emsp;&emsp;分为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL<br>默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别</p>
<a id="more"></a>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="attr">logging.level.root</span>=WARN</span><br></pre></td></tr></table></figure>
<p>这种方式只能将日志打印在控制台上</p>
<h2 id="二、Logback日志"><a href="#二、Logback日志" class="headerlink" title="二、Logback日志"></a>二、Logback日志</h2><p>spring boot内部使用Logback作为日志实现的框架。<br>Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。<br>logback相对于log4j的一些优点：<a href="https://blog.csdn.net/caisini_vc/article/details/48551287" target="_blank" rel="noopener">https://blog.csdn.net/caisini_vc/article/details/48551287</a></p>
<h3 id="1、配置logback日志"><a href="#1、配置logback日志" class="headerlink" title="1、配置logback日志"></a>1、配置logback日志</h3><p>删除application.properties中的日志配置<br>安装idea彩色日志插件：grep-console<br>resources 中创建 logback-spring.xml</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$</span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment">”来使用变量。 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"D:/guli_log/edu"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span></span><br><span class="line"><span class="xml">              value="%yellow(%date</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss&#125;</span><span class="xml">) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$</span><span class="template-variable">&#123;CONSOLE_LOG_PATTERN&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--输出到文件--&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;log.path&#125;</span><span class="xml">/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [%thread] %-5level %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;log.path&#125;</span><span class="xml">/info/log-info-%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;log.path&#125;</span><span class="xml">/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [%thread] %-5level %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;log.path&#125;</span><span class="xml">/warn/log-warn-%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$</span><span class="template-variable">&#123;log.path&#125;</span><span class="xml">/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [%thread] %-5level %logger</span><span class="template-variable">&#123;50&#125;</span><span class="xml"> - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$</span><span class="template-variable">&#123;log.path&#125;</span><span class="xml">/error/log-error-%d</span><span class="template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">logger</span>&gt;</span>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<span class="tag">&lt;<span class="name">appender</span>&gt;</span>。</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">logger</span>&gt;</span>仅有一个name属性，</span></span><br><span class="line"><span class="xml">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="xml">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="xml">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="xml">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="xml">        第一种把<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span>改成<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="xml">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span></span><br><span class="line"><span class="xml">     --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.guli"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="xml">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span></span><br><span class="line"><span class="xml">            可以包含零个或多个appender元素。</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2、将错误日志输出到文件"><a href="#2、将错误日志输出到文件" class="headerlink" title="2、将错误日志输出到文件"></a>2、将错误日志输出到文件</h3><p>类上添加注解 @Slf4j<br>异常输出语句 log.error(e.getMessage());</p>
<h3 id="3、将日志堆栈信息输出到文件"><a href="#3、将日志堆栈信息输出到文件" class="headerlink" title="3、将日志堆栈信息输出到文件"></a>3、将日志堆栈信息输出到文件</h3><p>定义工具类,创建ExceptionUtil.java工具类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getMessage(Exception e) &#123;</span><br><span class="line">		StringWriter sw = <span class="literal">null</span>;</span><br><span class="line">		PrintWriter pw = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sw = <span class="keyword">new</span> <span class="type">StringWriter</span>();</span><br><span class="line">			pw = <span class="keyword">new</span> <span class="type">PrintWriter</span>(sw);</span><br><span class="line">			<span class="comment">// 将出错的栈信息输出到printWriter中</span></span><br><span class="line">			e.printStackTrace(pw);</span><br><span class="line">			pw.flush();</span><br><span class="line">			sw.flush();</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			<span class="keyword">if</span> (sw != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					sw.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (pw != <span class="literal">null</span>) &#123;</span><br><span class="line">				pw.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sw.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用 log.error(ExceptionUtil.getMessage(e));</p>
<p>&nbsp;<br>创建toString方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"GuliException&#123;"</span> +</span><br><span class="line">        <span class="string">"message="</span> + <span class="keyword">this</span>.getMessage() +</span><br><span class="line">        <span class="string">", code="</span> + code +</span><br><span class="line">        <span class="string">'&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <categories>
        <category>统一处理</category>
      </categories>
  </entry>
  <entry>
    <title>统一返回结果处理</title>
    <url>/2020/07/17/%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、统一返回数据格式"><a href="#一、统一返回数据格式" class="headerlink" title="一、统一返回数据格式"></a>一、统一返回数据格式</h2><p>&emsp;&emsp;项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使前端(iOS Android, Web)对数据的操作更一致、轻松。</p>
<a id="more"></a>
<p>&emsp;&emsp;一般情况下，统一返回数据格式没有固定的格式，只要能描述清楚返回的数据状态以及要返回的具体数据就可以。但是一般会包含状态码、返回消息、数据这几部分内容。<br>&emsp;&emsp;例如，我们的系统要求返回的基本数据格式如下：<br><strong>列表：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"成功"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"刘德华"</span>,</span><br><span class="line">        <span class="attr">"intro"</span>: <span class="string">"毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br><strong>分页：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"成功"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">"rows"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"刘德华"</span>,</span><br><span class="line">        <span class="attr">"intro"</span>: <span class="string">"毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br><strong>没有返回数据：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">20000</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"成功"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br><strong>失败：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">20001</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"失败"</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br>因此，我们定义统一结果:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"success"</span>: 布尔, <span class="comment">//响应是否成功</span></span><br><span class="line">  <span class="attr">"code"</span>: 数字, <span class="comment">//响应码</span></span><br><span class="line">  <span class="attr">"message"</span>: 字符串, <span class="comment">//返回消息</span></span><br><span class="line">  <span class="attr">"data"</span>: HashMap <span class="comment">//返回数据，放在键值对中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、创建统一结果返回类"><a href="#二、创建统一结果返回类" class="headerlink" title="二、创建统一结果返回类"></a>二、创建统一结果返回类</h2><h3 id="1、创建接口定义返回码"><a href="#1、创建接口定义返回码" class="headerlink" title="1、创建接口定义返回码"></a>1、创建接口定义返回码</h3><p>创建接口 ResultCode.java</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ResultCode &#123;</span><br><span class="line"></span><br><span class="line">    public static Integer SUCCESS = 20000;</span><br><span class="line"></span><br><span class="line">    public static Integer <span class="builtin-name">ERROR</span> = 20001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、创建结果类"><a href="#2、创建结果类" class="headerlink" title="2、创建结果类"></a>2、创建结果类</h3><p>创建类 R.java</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = <span class="meta-string">"是否成功"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Boolean</span> success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = <span class="meta-string">"返回码"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = <span class="meta-string">"返回消息"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = <span class="meta-string">"返回数据"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="keyword">data</span> = new HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> R()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static R ok()&#123;</span><br><span class="line">        R r = new R();</span><br><span class="line">        r.setSuccess(<span class="literal">true</span>);</span><br><span class="line">        r.setCode(ResultCode.SUCCESS);</span><br><span class="line">        r.setMessage(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static R error()&#123;</span><br><span class="line">        R r = new R();</span><br><span class="line">        r.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        r.setCode(ResultCode.ERROR);</span><br><span class="line">        r.setMessage(<span class="string">"失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R success(<span class="built_in">Boolean</span> success)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R message(String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R code(Integer code)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="keyword">data</span>(String key, Object value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span>.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="keyword">data</span>(Map&lt;String, Object&gt; map)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
]]></content>
      <categories>
        <category>统一处理</category>
      </categories>
  </entry>
</search>
